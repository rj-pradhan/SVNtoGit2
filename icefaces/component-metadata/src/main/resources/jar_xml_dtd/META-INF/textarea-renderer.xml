<?xml version="1.0" encoding="UTF-8"?>
<renderer>
  <description><![CDATA[

<p>Use the <code>ui:textArea</code> tag to create a multiple-line
    input field for text.</p>    

<h3>HTML Elements and Layout</h3>

<p>The textArea component renders an HTML &lt;textarea&gt; element.</p> 

    <h3>Configuring the <code>ui:textArea</code> Tag</h3>

<p>Use the <code>text</code> attribute to associate
the component with a model object that represents the current value,
by setting the attribute's value to a JavaServer Faces EL expression
    that evaluates to a backing bean or a backing bean property.</p>

    <p>To optionally specify a label for the component, use the
    <code>label</code> attribute, or specify a label facet.</p>

    <h3>Facets</h3>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    <li><code>readOnly</code>: use this facet to specify a custom 
    component for displaying the readOnly value of this component.</li>
    </ul>

    <h3>Theme Identifiers</h3> 

    <p>The input element has a style class "TxtAra", or "TxtAraDis"
    when the field is disabled. If a label attribute is specified, the
    label element's class attribute is set to "LstAln" followed by
    "LblLvl1Txt", "LblLvl2Txt" or "LblLvl3Txt" depending on the label
    level.</p>  


    <h3>Client-side JavaScript functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the TextArea component. 

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>field_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr>
    <tr>
    <td style="vertical-align: top">
    <code>field_setValue(&lt;id&gt;, &lt;newValue&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Set the value of the field to <code>&lt;newValue&gt;</code>.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getValue(&lt;id&gt;)</code>
  </td>
    <td style="vertical-align: top">Get the value of the field.</td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>field_getInputElement(&lt;id&gt;)</code></td>
    <td style="vertical-align: top">
    Get hold of a reference to the textArea element rendered by this
    component.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>component_setVisible(&lt;id&gt;)</code>
  </td>
      <td style="vertical-align: top">Hide or show this component.
      </td>
    </tr>
  </tbody>
</table>


    <h3>Examples</h3>

<p> This example uses a backing bean <code>FieldTest</code> with a property
    string. The tag generates a textarea with a label "Comment:". The
    rows and columns attributes have been set, to ensure that the
    component has the same size on all browsers. </p> 
<pre>
     &lt;ui:textArea id="textarea" type="textarea"
               label="Comment:" 
               text="#{FieldTest.string}"
               rows="5" columns="50"/&gt;
</pre>
      ]]></description>

  <component-family>com.sun.rave.web.ui.TextArea</component-family>

  <renderer-type>com.sun.rave.web.ui.TextArea</renderer-type>

  <attribute>
    <description>
    Text to be initially displayed in this input field. This
attribute's value can be a string, or a JavaServer Faces EL expression
that resolves to a backing bean or a backing bean property. If the
value is a reference to a backing bean, the bean will be updated if
the user enters a new valid value in the field. If the string you want
to use is in a message bundle, bind this attribute to a backing bean
and initialize the relevant bean property from the message bundle.
        </description>
    <attribute-name>text</attribute-name>
  </attribute>

  <attribute>
    <description><![CDATA[The binding attribute is used to configure the
      component through Java code. This approach is intended for
      advanced uses, when the tag attributes cannot provide the
      desired output. The value of the binding attribute must be a
      JavaServer Faces EL expression that resolves to a backing bean,
      or to a backing bean property of type 
      <code>com.sun.rave.web.ui.component.TextArea</code>. ]]>
        </description>
    <attribute-name>binding</attribute-name>
  </attribute>

  <attribute>
    <description>
    Number of rows used to render the textarea. You should set a value
    for this attribute to ensure that it is rendered correctly in all
    browsers.  Browsers vary in the default number of rows used for
    textarea fields.  
    </description>
    <attribute-name>rows</attribute-name>
  </attribute>

  <attribute>
    <description>
Flag indicating that activation of this component by the user is not currently permitted.
        </description>
    <attribute-name>disabled</attribute-name>
  </attribute>

  <attribute>
    <description>
      Use the rendered attribute to indicate whether the HTML code for
      the component should be included in the rendered HTML page. If
      set to false, the rendered HTML page does not include the HTML
      for the component. If the component is not rendered, it is also
      not processed on any subsequent form submission. 
        </description>
    <attribute-name>rendered</attribute-name>
  </attribute>

  <attribute>
    <description>
      Flag indicating that event handling for this component should be
      handled immediately (in Apply Request Values phase) rather than
      waiting until Invoke Application phase. 
        </description>
    <attribute-name>immediate</attribute-name>
  </attribute>

  <attribute>
    <description>
        If set, a label is rendered adjacent to the component with the
        value of this attribute as the label text.
        </description>
    <attribute-name>label</attribute-name>
  </attribute>

  <attribute>
    <description>

Position of this element in the tabbing order for the current
      document. The tabbing order determines the sequence in which
      elements receive focus when the tab key is pressed. The tabIndex
      value must be an integer between 0 and 32767.
 
        </description>
    <attribute-name>tabIndex</attribute-name>
  </attribute>

      <attribute>
        <attribute-name>value</attribute-name>
        <attribute-extension>
          <is-hidden>true</is-hidden>
          <tag-attribute>false</tag-attribute>
        </attribute-extension>
      </attribute>

      &visible-attrs;
      &converter-props;
      &validator-props;

      <renderer-extension>
        <default-property-name>text</default-property-name>
        <instance-name>textArea</instance-name>
        <is-container>true</is-container>
        <is-non-visual>false</is-non-visual>
        <tag-name>textArea</tag-name>
        <taglib-prefix>ui</taglib-prefix>
        <taglib-uri>http://www.sun.com/web/ui</taglib-uri>
      </renderer-extension>

</renderer>
