<?xml version="1.0" encoding="UTF-8"?>
<renderer>
  <description><![CDATA[

<p>Use the <code>ui:label</code>
    tag to display a label for a component. To specify which component
    the label belongs to you can do one of the following:</p> 
<ul> 
<li>Place the component to be labeled in the body of
    <code>ui:label</code>; or </li>  
<li>Set the value of the <code>for</code> attribute of <code
    >ui:label</code> to the id of the component to be labeled.</li> 
</ul> 
<p>If the tags are adjacent on the page, it is simpler to place the
    component in the body of the <code>ui:label</code> tag. </p> 

<p>Note that many components in this library have <code>label</code> 
    and <code>labelLevel</code> attributes (and sometimes
    <code>labelOnTop</code>) which can be used instead of <code
    >ui:label</code>. The main reason
    to use <code>ui:label</code> is to specify the
    appearance of the label beyond what these attributes permit. 
</p>   

<h3>HTML Elements and Layout</h3>

<p> 
The <code>ui:label</code> tag results in a HTML <code>&lt;label&gt;</code>
    or <code>&lt;span&gt;</code> element. A <code>&lt;span&gt;</code>
    element is rendered if no labeled component is found. </p> 

<p> If the tag has a body, the body must consist of tags for
    JavaServer Faces components only. The components become children
    of the <code>Label</code> component, and are rendered after the
    <code>&lt;label&gt;</code> element.</p>  

<p>If the tag has a body but no <code>for</code> attribute, a
    <code>&lt;label&gt;</code> element is rendered. Its
    <code>for</code> attribute is set to the element ID of the first
    child component that is an <code>EditableValueHolder. </code> 

<h3>Theme Identifiers</h3>

<p>The Label renderer relies on the following theme classes:</p> 

<pre>
LblLev1Txt
LblLev2Txt 
LblLev3Txt 
LblRqdDiv
</pre>

<h3>Client Side Javascript Functions</h3>

<p>None.</p> 

<h3>Example</h3>

<h4>Example 1: <code>ui:label</code> with <code>for</code> attribute</h4>

<pre> 
      &lt;ui:label id="label1" text="Label 1:" for="field1" labelLevel="2"/&gt;
      &lt;ui:field id="field1" text="#{Bean.value}" type="text" trim="true"/&gt;
</pre> 

<h4>Example 2: <code>ui:label</code> with labeled component in tag body</h4>

<pre> 
      &lt;ui:label id="label2" text="Label 2:" labelLevel="2"/&gt;
          &lt;ui:field id="field2" text="#{Bean.value}" type="text" 
                    trim="true"/&gt;
      &lt;/ui:label&gt; 
</pre> 

<h4>Example 3: Using the label attribute instead of <code>ui:label</code></h4>

<pre> 
      &lt;ui:field id="field3" text="#{Bean.value}" type="text" 
                trim="true" label="Label 3:" labelLevel="2"/&gt;
</pre> 


  
      ]]></description>

  <component-family>com.sun.rave.web.ui.Label</component-family>

  <renderer-type>com.sun.rave.web.ui.Label</renderer-type>

  <attribute>
    <description>
      Use the hideIndicators attribute to prevent display of the
      required and invalid icons with the label. When the required
      attribute on the component to be labeled is set to true, the
      required icon is displayed next to the label. If the user
      submits the page with an invalid value for the component, the
      invalid icon is displayed. This attribute is useful when the
      component has more than one label, and only one label should
      show the icons. 
    </description>
    <attribute-name>hideIndicators</attribute-name>
  </attribute>

  <attribute>
    <attribute-name>value</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  &binding-attrs;

  &visible-attrs;

  <renderer-extension>
    <tag-name>label</tag-name>
    <taglib-prefix>ui</taglib-prefix>
    <taglib-uri>http://www.sun.com/web/ui</taglib-uri>
  </renderer-extension>

</renderer>
