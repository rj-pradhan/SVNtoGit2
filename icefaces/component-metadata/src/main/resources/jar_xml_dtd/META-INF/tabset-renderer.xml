<?xml version="1.0" encoding="UTF-8"?>
<renderer>
  <description><![CDATA[

<h3>About This Tag</h3>

<p>The TabSet renders a set of Tab children. It keeps track of the currently
selected child Tab as well as applying any specified ActionListener.</p>

<h3>Configuring the TabSet Tag</h3>

<p>The TabSet can currently be used in one of two ways: via a component binding to a
TabSet and group of child Tab components (defined in a backing bean); or by specifying the
TabSet and child Tabs directly in your JSP.</p><p>Examples of both are shown in the Examples
section below. It is anticipated that the component binding method will be more
common as this allows a single set of Tabs to be easily shared among many pages. In
either case, the initial selection for the TabSet component can be specified using the
&quot;selected&quot; property. Note that if an ActionListener is applied to the TabSet
component, it adds the specified ActionListener to each of its child Tab components action
listener lists.</p>

<h3>Facets</h3>

<p>None at this time</p>

<h3>Client Side Javascript Functions</h3>

<p>None at this time</p>

<h3>Examples</h3>

<p><strong>Example 1: Define the TabSet via a component binding</strong><br>
One way a TabSet component can be specified is via a JSF component binding to an instance
defined in a backing bean. The contents of the JSP in this case will simply be something
like:</p>

<p><code>&lt;ui:tabSet binding=&quot;#{TabSetBean.sportsTabSet}&quot; /&gt;</code></p>

<p>The code in the corresponding backing bean instance would look something like:</p>

<p><code>import java.util.List;<br>
import java.lang.Class;<br>
import javax.faces.FactoryFinder;<br>
import javax.faces.el.MethodBinding;<br>
import javax.faces.event.ActionEvent;<br>
import javax.faces.application.Application;<br>
import javax.faces.application.ApplicationFactory;<br>
import com.sun.rave.web.ui.component.Tab;<br>
import com.sun.rave.web.ui.component.TabSet;</p>

<p>public class TabSetBean {<br>
&nbsp;&nbsp;&nbsp; private TabSet sportsTabSet = null;<br>
<br>
&nbsp;&nbsp;&nbsp;  // Creates a new instance of TabSetBean //<br>
&nbsp;&nbsp;&nbsp; public TabSetBean() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sportsTabSet = new TabSet();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; List kids = sportsTabSet.getChildren();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tab level1Tab = new Tab(&quot;Baseball&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level1Tab.setId(&quot;Baseball&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tab level2Tab = addTab(level1Tab,
&quot;National&quot;); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Mets&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Pirates&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Cubs&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level2Tab = addTab(level1Tab,
&quot;American&quot;); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Yankees&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Tigers&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Mariners&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level2Tab = addTab(level1Tab, &quot;AAA&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Spinners&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Renegades&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Clippers&quot;); <br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kids.add(level1Tab);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level1Tab = new Tab(&quot;Football&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level1Tab.setId(&quot;Football&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level2Tab = addTab(level1Tab, &quot;NFC&quot;);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Giants&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Bears&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Falcons&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level2Tab = addTab(level1Tab, &quot;AFC&quot;);
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Jets&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Patriots&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Colts&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; level2Tab = addTab(level1Tab,
&quot;College&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Wolverines&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Hurricanes&quot;);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addTab(level2Tab, &quot;Buckeyes&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kids.add(level1Tab);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class[] args = new Class[] { ActionEvent.class
};<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MethodBinding binding =
createBinding(&quot;#{TabSetBean.tabClicked}&quot;, args);<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sportsTabSet.setActionListener(binding); <br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sportsTabSet.setSelected(&quot;Jets&quot;);<br>
<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; private MethodBinding createBinding(String expr, Class[] args) { <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ApplicationFactory factory =
(ApplicationFactory)<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FactoryFinder.getFactory(FactoryFinder.APPLICATION_FACTORY);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Application app = factory.getApplication();<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return app.createMethodBinding(expr, args);<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; private Tab addTab(Tab parent, String newTabLabel) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Tab tab = new Tab(newTabLabel);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tab.setId(newTabLabel); <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parent.getChildren().add(tab);<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return tab;<br>
&nbsp;&nbsp;&nbsp; } </p>

<p>&nbsp;&nbsp;&nbsp; public void tabClicked(ActionEvent event) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String clickedTabId = event.getComponent().getId():<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String selectedTabId = sportsTabSet.getSelected();<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ... do sometehing based upon the clicked or
selected tab id ...<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; public TabSet getSportsTabSet() {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return sportsTabSet;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
&nbsp;&nbsp;&nbsp; public void setSportsTabSet(TabSet tabs) {<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sportsTabSet = tabs;<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code></p>

<p><strong>Example 2: Define the TabSet in your JSP</strong><br>
A tabSet can also be defined directly in your JSP. The following example defines a set of tabs with
three level one tabs (labelled &quot;One&quot;, &quot;Two&quot; and &quot;Three&quot;). Each
level one tab also has two level two tab childeren (labelled &quot;XxxA&quot; and
&quot;XxxB&quot; where X is the top level tab number. The initially selected Tab for this
TabSet will be &quot;TwoA&quot;.</p>

<p><code>&lt;ui:tabSet selected=&quot;TwoA&quot;&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;One&quot; text=&quot;One&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;OneA&quot; text=&quot;One
A&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;OneB&quot; text=&quot;One
B&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tab&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;Two&quot; text=&quot;Two&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;TwoA&quot; text=&quot;Two
A&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;TwoB&quot; text=&quot;Two
B&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tab&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;Three&quot; text=&quot;Three&quot;&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;ThreeA&quot;
text=&quot;Three A&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ui:tab id=&quot;ThreeB&quot;
text=&quot;Three B&quot; /&gt;<br>
&nbsp;&nbsp;&nbsp; &lt;/ui:tab&gt; <br>
&lt;/ui:tabSet&gt;</code></p>


      ]]></description>

  <component-family>com.sun.rave.web.ui.TabSet</component-family>

  <renderer-type>com.sun.rave.web.ui.TabSet</renderer-type>

  <attribute>
    <description>
        Use the actionListener attribute to cause the hyperlink to fire an
        event. The value must be an EL expression and it must evaluate to the 
        name of a public method that takes an ActionEvent parameter and returns
        void. 
        </description>
    <attribute-name>actionListener</attribute-name>
  </attribute>

  &visible-attrs;

  <renderer-extension>
    <tag-name>tabSet</tag-name>
    <taglib-prefix>ui</taglib-prefix>
    <taglib-uri>http://www.sun.com/web/ui</taglib-uri>
  </renderer-extension>

</renderer>
