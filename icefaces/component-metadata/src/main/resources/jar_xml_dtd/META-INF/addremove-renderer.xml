<?xml version="1.0" encoding="UTF-8"?>
<renderer>
  <description><![CDATA[


    <h4>About this tag</h4>

    <p>This tag renders two listboxes (one for available options, one
    for selected options) together with buttons to move the options
    between the lists, and optionally to order the selected options. 
    Use the <code>items</code> attribute to associate the component
    with an array, collection or map of
    <code>com.sun.rave.web.ui.model.Option</code> and the
    <code>selected</code> attribute to associate the component with a
    model object that represents the selected items. The model object
    must be an array of objects, whose values must be represented by
    the values on the <code>com.sun.rave.web.ui.model.Option</code>s. </p> 

    <h4>Component layout and Facet structure</h4>
    
    <p>The component can be laid out using either horizonal layout
    (the default) or vertical layout (if the <code>vertical</code> 
    attribute is set to true). 

In the diagrams below, facet child
    components are shown as <span style="color:lightblue">light
blue</span>. Non-facet areas are <span
style="color:violet">violet</span>.</p>  

    <h5>Horizontal layout</h5> 

<p> In horizontal layout, the component
    label (or header) may be shown either above the component
    (if the <code>labelOnTop</code>attribute is true) or next to the
    component as shown in the diagram. 
</p> 

<style type="text/css">
table.AddRmvBtnTbl .Btn1 {width:100%}
table.AddRmvBtnTbl .Btn1Hov {width:100%}
table.AddRmvBtnTbl .Btn1Dis {width:100%}
table.AddRmvBtnTbl .Btn2 {width:100%}
table.AddRmvBtnTbl .Btn2Hov {width:100%}
table.AddRmvBtnTbl .Btn2Dis {width:100%}
.AddRmvHrzWin, .AddRmvHrzBwn {margin-top:3px}
.AddRmvHrzDiv {float:left; display:inline-table; margin:3px}  
.AddRmvHrzLst {display:inline-table; margin:3px}  
select {margin:3px}  
.spacer {margin:3px}  
</style> 

<div id="addremove1:list_enclosing">
<span class="AddRmvHrzDiv">
<span style="background:lightblue">header</span>
</span>

<span class="AddRmvHrzDiv">&nbsp;</span>

<div class="AddRmvHrzDiv">
<span style="background:lightblue">availableLabel</span>
<br />
<select style="background:violet" size="12">
<option>List of available items</option> 
</select>
</div>
<div class="AddRmvHrzDiv">
<span>&nbsp;</span>
<br />

<div style="padding-left:10;padding-right:10">
<table class="AddRmvBtnTbl">
<tr>
<td align="center" width="125px">

<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>

<div class="AddRmvHrzWin">
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addAllButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
</div>

<div class="AddRmvHrzBwn">
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>
</div>

<div class="AddRmvHrzBwn">
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;removeAllButton&nbsp;&nbsp;</span>
</div>

<div class="AddRmvHrzBwn">
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;moveUpButton&nbsp;&nbsp;&nbsp;&nbsp;</span>
</div>

<div class="AddRmvHrzBwn">
<span style="background:lightblue">&nbsp;&nbsp;moveDownButton&nbsp;&nbsp;</span>
</div>

</td>
</tr>
</table>
</div>
</div>

<div class="AddRmvHrzLst">
<span style="background:lightblue">selectedLabel</span>
<br />
<select style="background:violet" size="12">
<option>List of selected items</option> 
</select>
</div>
</div> 
<span>&nbsp;</span> 
<div> 
    <span style="background:lightblue">
      footer
    </span> 

</div> 


<h5>Vertical layout</h5>


<div id="addremove1:list_enclosing">

<div class="spacer">
<span style="background:lightblue">header</span>
</div>

<div class="spacer">
<span style="background:lightblue">availableLabel</span>
<br />
<select style="background:violet" size="12">
<option>List of available items</option> 
</select>
</div>

<div class="spacer"> 
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>

<span>&nbsp; 

<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addAllButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>

<span>&nbsp; 

<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;removeButton&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>

<span>&nbsp; 

<span style="background:lightblue">&nbsp;&nbsp;&nbsp;removeAllButton&nbsp;&nbsp;</span>


<div class="spacer">
<span style="background:lightblue">selectedLabel</span>
<br />
<select style="background:violet" size="12">
<option>List of selected items</option> 
</select>
</div>


<div class="spacer"> 
<span style="background:lightblue">&nbsp;&nbsp;&nbsp;&nbsp;moveUpButton&nbsp;&nbsp;&nbsp;&nbsp;</span>

<span>&nbsp;</span> 

<span style="background:lightblue">&nbsp;&nbsp;moveDownButton&nbsp;&nbsp;</span>
</div>
</div> 
<div> 
    <span style="background:lightblue">
      footer
    </span> 

</div> 




    <h4>Facets</h4>

    <ul>

<li> 
<code>addButton:</code>
Use this facet to replace the standard "Add" button. If
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_addButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
add()</code> function. See the section on JavaScript for details.
</li> 

<li> 
<code>removeButton:</code>
Use this facet to replace the standard "Remove"
button. If 
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_removeButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
remove()</code> function. See the section on JavaScript for details.
</li> 

<li> 
<code>addAllButton:</code>
Use this facet to replace the standard "Add All"
button. If 
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_addAllButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
addAll()</code> function. See the section on JavaScript for details.
</li> 

<li> 
<code>removeAllButton:</code>
Use this facet to replace the standard "Remove All"
button. If 
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_removeAllButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
removeAll()</code> function. See the section on JavaScript for details.
</li> 


<li> 
<code>moveUpButton:</code>
Use this facet to replace the standard "Move Up"
button. If 
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_moveUpButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
moveUp()</code> function. See the section on JavaScript for details.
</li> 

<li> 
<code>moveDownButton:</code>
Use this facet to replace the standard "Move Down"
button. If 
you use a facet to replace this component, the JSF ID of this
component should be the ID given to the AddRemove component with
<code>_moveDownButton</code> appended at the end. If you wish to use the
JavaScript function associated with the default button, use the <code>
moveDown()</code> function. See the section on JavaScript for details.
</li> 

<li> 
<code>header:</code>
Use this facet to create a header for the
component. The facet will replace the component label. 
</li> 

<li> 
<code>footer:</code>
Use this facet to create a footer for the
component.

</li> 
    </ul>

    <h4>Client-side JavaScript functions</h4>

<p>When the component is rendered, a JavaScript object corresponding
to the component is created. The name of the variable is AddRemove_
followed by the component's DOM id where the colons have been replaced
by underscores. For example, if the id of the component is
<code>listform:addremove</code> then the JavaScript variable name will
be <code>AddRemove_listform_addremove</code>. To manipulate the
component on the client side, you may invoke functions on the
JavaScript object. With reference to the id above, to add all elements
on the available list that the user has selected, invoke 
<code> AddRemove_listform_addremove.add()</code>. 
</p> 

    <ul>
    <li><code>add()</code>: the highlighted items on the available list
    are moved to the selected list. </li> 
    <li><code>addAll()</code>: all non-disabled  items on the available list
    are moved to the selected list. </li> 
    <li><code>remove()</code>: the highlighted items on the selected list
    are moved to the available list. </li> 
    <li><code>removeAll()</code>: all non-disabled  items on the selected list
    are moved to the available list. </li> 
    <li><code>moveUp()</code>: the highlighted items on the selected list
    are moved up one position. </li> 
    <li><code>moveDown()</code>: the highlighted items on the selected list
    are moved down one position. </li> 
    <li><code>updateButtons()</code>: this function ensures that the
    buttons are enabled/disabled based on the current selections in
    the lists. Invoke this function if you programmatically modify the
    selections on the available or selected list using client-side
    scripts. You do not need to invoke it when using any of the
    functions listed above, as they already invoke this function at
    the end. </li>   
    </ul>

    <h4>Configuring the AddRemove tag</h4>

    <h4>Examples</h4>
    
<p>The component gets the options from a managed bean called
AirportBean. The selections are stored in another managed bean
(AirportSelectionBean). The <code>selectAll</code> attribute indicates that the
<code>Add All</code> and <code>Remove All</code> buttons should be
shown. A label for the component as a whole (<code>label</code>) is shown
next to the component (<code>labelOnTop</code> is false). Labels have
been specified for the list of available items and for the list of
selected items. The <code>sorted</code> attribute indicates that the options on
the list will be shown in alphabetical order.</p>
<pre>
        &lt;ui:addRemove id="list"
                      items="#{AirportBean.airports}"
                      selected="#{AirportSelectionBean.airportSel}"
                      label="Select airports"
                      availableItemsLabel="Available Airports"
                      selectedItemsLabel="Selected Airports"
                      selectAll="true"
		      sorted="true"
                      labelOnTop="false"/&gt;
</pre>

<p>As in the previous example, with the following exceptions: The
component is rendered using vertical layout (in this case, the main
component label is always rendered above the component). 
The <code>moveButtons</code> attribute indicates that the
<code>Move Up</code> and <code>Move Down</code> buttons should be
shown. </p> 
<pre> 
        &lt;ui:addRemove id="list"
                      items="#{AirportBean.airports}"
                      selected="#{AirportSelectionBean.airportSel}"
                      label="Select some names"
                      availableItemsLabel="Available Names"
                      selectedItemsLabel="Selected Names"
                      selectAll="true"
                      moveButtons="true"
                      vertical="true"/&gt;
</pre> 


      ]]></description>

  <component-family>com.sun.rave.web.ui.AddRemove</component-family>

  <renderer-type>com.sun.rave.web.ui.AddRemove</renderer-type>

  <attribute>
    <description>&lt;p&gt;Use this attribute to bind the
      component to a model object. The value of this attribute must be
      an EL expression. &lt;/p&gt;  

      &lt;p&gt;If the listbox allows multiple selections (see the 
      &lt;code&gt;multiple&lt;/code&gt; attribute), then the EL expression must
      evaluate to one of the following types:&lt;/p&gt;
      &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;java.lang.Object[]&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;An array of primitives&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;java.util.List&lt;/code&gt;, or a subclass thereof&lt;/li&gt;
      &lt;/ul&gt; 
      &lt;p&gt;Note that if you use a &lt;code&gt;java.util.List&lt;/code&gt; to
         represent the value, you must specify a converter for the
	 type of the List members unless they are Strings. For any
	 other type, even if you use a default convert, you must
	 configure it explicitly. For arrays, the component can locate
	 the default converters. &lt;/p&gt;
      &lt;p&gt;If the listbox allows single selections, then the EL
      expression must be a subclass of to a java.lang.Object.&lt;/p&gt;

      &lt;p&gt;If using a custom model class and custom converter, note that
      the model class must ovverride the equals method, as that is 
      used to determine which objects should be marked as selected.&lt;/p&gt; 
	 
      </description>
    <attribute-name>selected</attribute-name>
  </attribute>

  <attribute>
    <description>&lt;p&gt;If you use an OptionGroup to group
      several options together, the component by default uses
      separators between the groups. To turn off the automatic
      separators, set this attribute to false.&lt;/p&gt; 
	 
      </description>
    <attribute-name>separators</attribute-name>
  </attribute>

  <attribute>
    <attribute-name>value</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <attribute-name>labelLevel</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <attribute-name>separators</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when the mouse pointer leaves either the list of available items or the list of the selected items. 
      </description>
    <attribute-name>onBlur</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a web application user changes
      the selection made in either the list of available items or the list of the selected items. 
      </description>
    <attribute-name>onChange</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a mouse click
        occurs over either the list of available items or the list of the selected items.
      </description>
    <attribute-name>onClick</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a mouse double click
        occurs over either the list of available items or the list of the selected items.
      </description>
    <attribute-name>onDblClick</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when either the list of available items or the list of the selected items receives focus.
      </description>
    <attribute-name>onFocus</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a key press
        occurs over either the list of available items or the list of the selected items.
      </description>
    <attribute-name>onKeyDown</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a key press and release
        occurs over either the list of available items or the list of the selected items.
      </description>
    <attribute-name>onKeyPress</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a key release
        occurs over either the list of available items or the list of the selected items.
      </description>
    <attribute-name>onKeyUp</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a mouse button press
        occurs over either the list of available items or the list of the selected items.
      </description>
    <attribute-name>onMouseDown</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a mouse pointer moves over this 
      component.
      </description>
    <attribute-name>onMouseMove</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a mouse pointer leaves either the list of available items or the list of the selected items.
      </description>
    <attribute-name>onMouseOut</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a mouse pointer enters either the list of available items or the list of the selected items.
      </description>
    <attribute-name>onMouseOver</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a mouse button is released 
      inside either the list of available items or the list of the
selected items. 
      </description>
    <attribute-name>onMouseUp</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <attribute>
    <description>
        Scripting code executed when a selection is made in this
	component. 
      </description>
    <attribute-name>onSelect</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  <renderer-extension>
    <instance-name>addRemoveList</instance-name>
    <tag-name>addRemove</tag-name>
    <taglib-prefix>ui</taglib-prefix>
    <taglib-uri>http://www.sun.com/web/ui</taglib-uri>
  </renderer-extension>

</renderer>
