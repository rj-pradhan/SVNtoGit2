<?xml version="1.0" encoding="UTF-8"?>
<renderer>
  <description><![CDATA[

Use the ui:button tag to display
an input button in the rendered HTML page. The input button submits the
associated form when activated by the user. The
corresponding ActionEvent events then occur on the server. <br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">HTML
Elements and Layout</h3>
<span
 style="text-decoration: line-through; color: rgb(0, 0, 0);"></span><span
 style="color: rgb(0, 0, 0);">This tag uses the XHTML
&lt;input&gt; element to create a button with a
text label.</span><br
 style="color: rgb(0, 0, 0);">
<h3 style="color: rgb(0, 0, 0);">Client
Side Javascript Functions</h3>
The button component supports a client side javascript
object.&nbsp; To use this object all you need to do is get the
object by using document.getElementById() function to get the
object.&nbsp; It is recommended though you pass the result of the
getElementById() function to a local variable rather than accessing the
functions directly.&nbsp; The object supports the following
functions:
<ul>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">isMini()</span>:
Test if button style is "mini" for
the button.&nbsp; Returns a boolean.</li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">isPrimary(): </span>Test
if button style is "primary" for
the button.&nbsp; Returns a boolean.</li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">isSecondary()</span>:
    <span style="font-style: italic;">DEPRECATED
use isPrimary instead </span>Test
if button style is "secondary" for
the button.&nbsp; Returns a boolean.<br>
  </li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">setMini(mini)</span>:
Set button style&nbsp;<span
 style="text-decoration: line-through;"></span>to&nbsp;"mini"
for the button. If
the mini <span
 style="text-decoration: line-through;"></span>attribute
is set to true,
the
element is shown with mini styles.</li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">setPrimary(primary)</span>:
Set button style<span
 style="text-decoration: line-through;"></span>
to "primary" for the
given button. If the primary <span
 style="text-decoration: line-through;"></span>attribute
is set to
true, the element is shown with primary style.</li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">setSecondary(secondary)</span>:
    <span style="font-style: italic;">DEPRECATED
use setPrimary instead</span> Set
button style<span
 style="text-decoration: line-through;"></span>
to "secondary" for the
given button. If the secondary <span
 style="text-decoration: line-through;"></span>attribute
is set to
true, the element is shown with secondary styles.</li>
</ul>
There are two other common functions that are useful for a button.
<ul>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">&nbsp;common_stripStyleClass(javascriptObj,
classToRemove)</span>: Use this
function to remove a style class from a any js object that supports the
class property.&nbsp; Takes a javascript object and the style class
string to remove.<br>
  </li>
  <li style="color: rgb(0, 0, 0);"><span
 style="font-style: italic;">&nbsp;common_addStyleClass(this,
newType)</span>: Use this function
to add a new style class to any js object that supports the class
property. Takes a javascript object and the style class string to add.<br>
    <span style="font-style: italic;"><br>
    <br>
    </span></li>
  <span style="font-style: italic;"></span>
</ul>
<h3>Examples</h3>
<h4>Example 1: Create a primary
button:</h4>
<code>&lt;ui:button
id="button1" text="#{ButtonBean.text}"
action="#{ButtonBean.success}" /&gt;<br>
</code>
<h4>Example 2: Create a primary
mini button:</h4>
<code>&lt;ui:button
id="button1" text="#{ButtonBean.text}"
action="#{ButtonBean.success}" mini="true" /&gt;</code><br>
<h4>Example 3: Create a secondary
button:</h4>
<code>&lt;ui:button
id="button1" text="#{ButtonBean.text}"
action="#{ButtonBean.success}" secondary="true" /&gt;<br>
</code>
<h4>Example 4: Create a secondary
mini button:</h4>
<code>&lt;ui:button
id="button1" text="#{ButtonBean.text}"
action="#{ButtonBean.success}" secondary="true" isMini="true" /&gt;</code><br>
<h4>Example 5: Create a reset
button:</h4>
<code>&lt;ui:button
id="button1"
text="#{ButtonBean.text}" action="#{ButtonBean.success}" reset="true"
/&gt;<br>
</code>
<h4>Example 6: Create an image
button:</h4>
<code>&lt;ui:button
id="button1" imageURL="#{ButtonBean.image}"
action="#{ButtonBean.success}" /&gt;</code>
<br>



      ]]></description>

  <component-family>com.sun.rave.web.ui.Button</component-family>

  <renderer-type>com.sun.rave.web.ui.Button</renderer-type>

  <attribute>
    <description>
        Indicates that activation of this component by the user is not currently 
        permitted. In this component library, the disabled attribute also causes 
        the button to be renderered using a particular style. 
        </description>
    <attribute-name>disabled</attribute-name>
  </attribute>

  <attribute>
    <description>
        The component identifier for this component. This value must be
        unique within the closest parent component that is a naming container.        
        </description>
    <attribute-name>id</attribute-name>
  </attribute>

  <attribute>
    <description>
        Resource path of an image to be displayed to create the visual
        appearance of this button. When an image value is given, the button
        type is set as "image". Exactly one "image" or "text" property must be
        specified.      
        </description>
    <attribute-name>image</attribute-name>
  </attribute>

  <attribute>
    <description>
         Indicates that the button should be rendered using a different style 
         than normal buttons. If the value is set to true, the button shall 
         appear somewhat smaller than a normal button. Mini buttons are useful 
         in situations where a button applies to an individual field on the 
         page, rather than a section, table, or whole page.
        </description>
    <attribute-name>mini</attribute-name>
  </attribute>

  <attribute>
    <description>
        Indicates that the button should be a HTML reset button. By default, 
        this value is false and the button is created as a submit button. If the
        value is set to true, no action listener will be invoked.
        </description>
    <attribute-name>reset</attribute-name>
  </attribute>

  <attribute>
    <description>
         Indicates that the button is not the most commonly used button within a 
         group. By default, this value is false and the button is rendered as a 
         "primary" button. Primary and secondary buttons are displayed using 
         different styles.
        </description>
    <attribute-name>secondary</attribute-name>
  </attribute>

  <attribute>
    <description>
        Indicates that padding should not be applied to the button text. By 
        default, whitespace characters are padded to button text greater than 
        or equal to 4 characters in length. If the value is set to true, no 
        padding is applied.
        </description>
    <attribute-name>noTextPadding</attribute-name>
  </attribute>

  <attribute>
    <attribute-name>value</attribute-name>
    <attribute-extension>
      <is-hidden>true</is-hidden>
      <tag-attribute>false</tag-attribute>
    </attribute-extension>
  </attribute>

  &binding-attrs;

  &visible-attrs;

  <renderer-extension>
    <tag-name>button</tag-name>
    <taglib-prefix>ui</taglib-prefix>
    <taglib-uri>http://www.sun.com/web/ui</taglib-uri>
  </renderer-extension>

</renderer>
