#
# Version: MPL 1.1/GPL 2.0/LGPL 2.1
#
# "The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations under
# the License.
#
# The Original Code is ICEfaces 1.5 open source software code, released
# November 5, 2006. The Initial Developer of the Original Code is ICEsoft
# Technologies Canada, Corp. Portions created by ICEsoft are Copyright (C)
# 2004-2006 ICEsoft Technologies Canada, Corp. All Rights Reserved.
#
# Contributor(s): _____________________.
#
# Alternatively, the contents of this file may be used under the terms of
# the GNU Lesser General Public License Version 2.1 or later (the "LGPL"
# License), in which case the provisions of the LGPL License are
# applicable instead of those above. If you wish to allow use of your
# version of this file only under the terms of the LGPL License and not to
# allow others to use your version of this file under the MPL, indicate
# your decision by deleting the provisions above and replace them with
# the notice and other provisions required by the LGPL License. If you do
# not delete the provisions above, a recipient may use your version of
# this file under either the MPL or the LGPL License."
#
#

#
showCasetitle = ICEfaces Component Showcase

# themes
theme.title =Theme:
theme.xp =XP
theme.royale =Royale

# Root node menu
menuDisplayText.componentSuiteMenuGroup = ICEfaces Component Suite
submenuContentTitle.componentSuiteMenuGroup = ICEfaces Component Suite

# Custom Components menu
menuDisplayText.componentsMenuGroup = Components
submenuContentTitle.componentsMenuGroup = Components

# Layout Panels menu item
submenuDisplayText.layoutPanelMenuGroup = Layout Panels
submenuContentTitle.layoutPanelMenuGroup = Layout Panel Components

# Style menue
submenuDisplayText.themesSubmenuItem = Component Styling
submenuContentTitle.themesSubmenuItem = Component Styling

# Survey
startpage.survey.linkText = Send your feedback by filling this survey

## Component Submenu items
submenuDisplayText.selectInputDateComponentSubmenuItem = Calendar
submenuContentTitle.selectInputDateComponentSubmenuItem = Calendar Component
submenuDisplayText.treeComponentSubmenuItem = Tree
submenuContentTitle.treeComponentSubmenuItem = Tree Component
submenuDisplayText.autoCompleteSubmenuItem = Autocomplete
submenuContentTitle.autoCompleteSubmenuItem = Autocomplete Component
submenuDisplayText.dragDropSubmenuItem = Drag & Drop
submenuContentTitle.dragDropSubmenuItem = Drag & Drop Component
submenuDisplayText.listSubmenuItem = Series Panel
submenuContentTitle.listSubmenuItem = Series Panel Component
submenuDisplayText.outputProgressComponentSubmenuItem = Progress Bar
submenuContentTitle.outputProgressComponentSubmenuItem = Progress Bar Component
submenuDisplayText.inputFileComponentSubmenuItem = File Upload
submenuContentTitle.inputFileComponentSubmenuItem = File Upload Component
submenuDisplayText.connectionStatusSubmenuItem = Connection Status
submenuContentTitle.connectionStatusSubmenuItem = Connection Status Component
submenuDisplayText.effectsSubmenuItem = Effects
submenuContentTitle.effectsSubmenuItem = Effects Demo
submenuDisplayText.panelPopupSubmenuItem = Popup Panel
submenuContentTitle.panelPopupSubmenuItem = Popup Panel Component
submenuDisplayText.menuBarSubmenuItem = Menu Bar
submenuContentTitle.menuBarSubmenuItem = Menu Bar Component
submenuDisplayText.positionedPanelItem =  Positioned Panel
submenuContentTitle.positionedPanelItem = Positioned Panel Component

submenuDisplayText.collapsiblePanelItem =  Collapsible Panel
submenuContentTitle.collapsiblePanelItem = Collapsible Panel Component


submenuDisplayText.chartComponentSubmenuItem = Charts
submenuContentTitle.chartComponentSubmenuItem = Chart Component
submenuDisplayText.combinedChartComponentSubmenuItem = Combining Charts
submenuContentTitle.combinedChartComponentSubmenuItem = Combining Charts
submenuDisplayText.dynamicChartComponentSubmenuItem = Dynamic Chart
submenuContentTitle.dynamicChartComponentSubmenuItem = Dynamic Chart

# Table Components Submenu items
submenuDisplayText.textFieldsSubmenuItem = Text Entry
submenuContentTitle.textFieldsSubmenuItem = Text Entry Components
submenuDisplayText.selectionTagsSubmenuItem = Selection
submenuContentTitle.selectionTagsSubmenuItem = Selection Components
submenuDisplayText.buttonsAndLinksSubmenuItem = Buttons & Links
submenuContentTitle.buttonsAndLinksSubmenuItem = Button & Link Components
submenuDisplayText.tableComponentSubmenuItem = Table
submenuContentTitle.tableComponentSubmenuItem = Table Component
submenuDisplayText.columnsComponentSubmenuItem = Columns
submenuContentTitle.columnsComponentSubmenuItem = Columns Component
submenuDisplayText.tableExpandableComponentSubmenuItem = Expandable Table
submenuContentTitle.tableExpandableComponentSubmenuItem = Expandable Table Example
submenuDisplayText.dataSortHeaderComponentSubmenuItem = Sortable Header
submenuContentTitle.dataSortHeaderComponentSubmenuItem = Sortable Header Component
submenuDisplayText.dataScrollerComponentSubmenuItem = Data Paging
submenuContentTitle.dataScrollerComponentSubmenuItem = Data Paging Component
submenuDisplayText.tableRowSelectionComponentSubmenuItem = Table Row Selection
submenuContentTitle.tableRowSelectionComponentSubmenuItem = Table Row Selection Component


# Layout Component Submenu items
submenuDisplayText.groupPanelComponentSubmenuItem = Grouping Panel
submenuContentTitle.groupPanelComponentSubmenuItem = Grouping Component
submenuDisplayText.gridPanelComponentSubmenuItem = Grid Panel
submenuContentTitle.gridPanelComponentSubmenuItem = Grid Component
submenuDisplayText.panelStackComponentSubmenuItem = Stacking Panel
submenuContentTitle.panelStackComponentSubmenuItem = Stacking Panel Component
submenuDisplayText.borderLayoutComponentSubmenuItem = Border Panel
submenuContentTitle.borderLayoutComponentSubmenuItem = Border Panel Component
submenuDisplayText.tabbedComponentSubmenuItem = Tab Set Panel
submenuContentTitle.tabbedComponentSubmenuItem = Tab Set Panel Component

# Default tab titles - for each component
tabbedHeadings.description = Description
tabbedHeadings.demo = Demonstration
tabbedHeadings.source = Source
tabbedHeadings.source.iframeMessage = Iframe not support use this link to view source.
tabbedHeadings.docs = Documentation

# Shared between all demos
component.global.serverFeedback = Server-side Backing Bean Values:

# Tree component example
components.tree.selected = Selected Node:
components.tree.basicTree = Default Tree Component
components.tree.node.title = Node
components.tree.node.tooltip = Node Tool Tip
components.tree.node.outputText.label = OutputText
components.tree.node.commandButton.label = Button
components.tree.delete = Delete
components.tree.copy = Copy
components.tree.explanation = This Tree demonstration shows:
components.tree.explanation.point1 = Dynamic update of tree without full-page refresh
components.tree.explanation.point2 = Node-aware actionListener that counts user clicks
components.tree.explanation.point3 = Add/remove tree nodes dynamically via data bean

# Tabbed Component Example
component.tabSet.persistantText = Text can be set to show on every tab
component.tabSet.tabVisibility = Tab Visibility:
component.tabSet.tabFocus = Selected Tab:
component.tabSet.tabPlacement = Tab Placement:
component.tabSet.top = top
component.tabSet.bottom = bottom
component.tabSet.tab1 = Tab 1
component.tabSet.tab1.content = Tab 1 content.
component.tabSet.tab2 = Tab 2
component.tabSet.tab2.content = Tab 2 content.
component.tabSet.tab3 = Tab 3
component.tabSet.tab3.content = Tab 3 content.
components.tabSet.example.iceFaces.title = ICEfaces
components.tabSet.example.iceFaces.description = The industry's first standards-compliant AJAX based solution for rapidly creating all Java rich web applications that are easily maintained, extended, and scaled, at very low cost.
components.tabSet.example.iceBrowser.title = ICEbrowser
components.tabSet.example.iceBrowser.description = The most widely distributed Java browser in the world for rendering web content into Java enterprise applications.
components.tabSet.example.icePdf.title = ICEpdf
components.tabSet.example.icePdf.description =  The leading Java PDF document rendering and viewing solution designed to be easily integrated into Java enterprise applications.
component.tabSet.addTab.title = Add a tab:
component.tabSet.addTab.tabLabel = Tab Label:
component.tabSet.addTab.tabContent = Tab Content:
component.tabSet.removeTab.title = Remove a tab:
component.tabSet.static.title = Static Tab Set Panel
component.tabSet.dynamic.title = Dynamic Tab Set Panel

# Progress Bar Example
component.progressBar.startButton = Start
component.progressBar.demo.selectMode = Select Output Mode:
component.progressBar.demo.content = Press the "Start" button to simulate a long-running process:
component.progressBar.demo.content2 = Press the "Start" button to simulate a process in indeterminate mode:
component.progressBar.label = Custom "In Progress" label:
component.progressBar.labelComplete = Custom "Completed" label:
component.progressBar.labelPosition = Select Label position:
component.progressBar.default = Default
component.progressBar.labelAlign = Label alignment:
component.progressBar.bottom = bottom left
component.progressBar.bottomCenter = bottom center
component.progressBar.bottomRight = bottom right
component.progressBar.top = top left
component.progressBar.topCenter  = top center
component.progressBar.topRight  = top right
component.progressBar.other = Custom
component.progressBar.left = left
component.progressBar.right = right
component.progressBar.embed = embedded

# Calendar Example
components.dateSelect.nonPopup = Default Calendar:
components.dateSelect.popup = Popup Calendar:
components.dateSelect.selectedDate = Selected Date:

# Panel Stack Example
components.panelStack.example.summary = Select a panel group to display:
components.panelStack.example.fruit.title = Fruit
components.panelStack.example.color.title = Color
components.panelStack.example.mineral.title = Mineral

# Data Scroller Example
component.progressBar.dataScroller = Data test

# Panel Navigation Example
component.panelNavigation.mainlink1 = Navigation Link 1
component.panelNavigation.mainlink2 = Navigation Link 2
component.panelNavigation.subLink1-1 = Sub Link 1-1
component.panelNavigation.subLink1-2 = Sub Link 1-2
component.panelNavigation.subLink2-1 = Sub Link 2-1
component.panelNavigation.subLink2-2 = Sub Link 2-2
component.panelNavigation.selectedPanel = You selected
component.panelNavigation.directions = Click on the navigation menu to select a different panel

# Border layout
component.panelLayout.placement = Panel Visibility:

# File Upload Example
component.fileUpload.title = File Upload
component.fileUpload.fileSize = File Size:
component.fileUpload.fileName =  File Name:
component.fileUpload.mimeType = Mime Type:
component.fileUpload.upload = Return to component showcase
component.fileUpload.direction1 = Select a file to upload using the 'Browse...' button, then upload the file by pressing the 'Upload' button.
component.fileUpload.note = Note:
component.fileUpload.direction2 = Do not press your web browser's 'back' button. To return to the component showcase, click this button:


# Selection Tags Example
component.selectionTags.instructions = Make selections using the mouse or keyboard.
component.selectionTags.subInstructions = Changing selection state triggers a partial submit.
component.selectionTags.newUser = New user:
component.selectionTags.popButtonLabel = Select drink:
component.selectionTags.languageButtonLabel = Select languages:
component.selectionTags.countryAndCitiesLabel = Select country & cities:
component.selectionTags.componentTypeLabel = Select component type:
component.selectionTags.serverFeedback = Server-side Backing Bean Values:
component.selectionTags.resultNewUserLabel = New user:
component.selectionTags.resultDrinkLabel = Drink:
component.selectionTags.resultLanguageLabel = Language:
component.selectionTags.resultCountryLabel = Country:
component.selectionTags.resultCitiesLabel = Cities:
component.selectionTags.carsLabel = Select Cars:

# Text Fields Example
component.textFields.directions = Pressing Enter or tabbing out of an input field triggers a partial submit:
component.textFields.name = Name:
component.textFields.password = Password:
component.textFields.comments = Comments:
component.textFields.serverFeedback = Server-side Backing Bean Values:

# Buttons and Links Example
component.buttonsAndLinks.inputTextLabel = Input Text:
component.buttonsAndLinks.inputTextNote =  (Partial submit disabled.)
component.buttonsAndLinks.submitButtonLabel = Command Button:
component.buttonsAndLinks.resetButtonLabel = Reset Button:
component.buttonsAndLinks.resetButtonNote =   (Resets form. No submit.)
component.buttonsAndLinks.pushButtonLabel = Push Button:
component.buttonsAndLinks.pushButtonNote =  (Fires onclick event, doesn't submit.)
component.buttonsAndLinks.imageButtonLabel = Image Button:
component.buttonsAndLinks.commandLinkLabel = Command Link:
component.buttonsAndLinks.outputLinkLabel = Output Link:
component.buttonsAndLinks.serverFeedback = Server-side Backing Bean Values:
component.buttonsAndLinks.clickedLabel = Clicked:
component.buttonsAndLinks.firedLabel = Action Event:

# Autocomplete Example
component.autoComplete.instructions = Select a value using the enter key or the mouse; tabbing out will select the first value.
component.autoComplete.subInstructions = Both selectInputText element instances are using the same backing bean--only the JSF source is different.
component.autoComplete.plainTitle = selectInputText:
component.autoComplete.plainDirections = using selectItem as child for plain text
component.autoComplete.htmlTitle = selectInputText:
component.autoComplete.htmlDirections = using facet as child to generate generic html
component.autoComplete.serverFeedback = Server-side Backing Bean Values
component.autoComplete.subServerFeedback = Populated by valueChangeListener
component.autoComplete.resultCityLabel = City:
component.autoComplete.resultStateLabel = State:
component.autoComplete.resultCountyLabel = County:
component.autoComplete.resultZipLabel = Zip:
component.autoComplete.resultAreaCodeLabel = Area Code:

# Drag and Drop Example
component.dragDrop.instructions = Drag and Drop each item's respective icon to the cart icon to add it to the shopping cart.
component.dragDrop.subInstructions = Press the "Return" button on each item to remove it from the cart.
component.dragDrop.cartZoneLabel1 = Add to Cart
component.dragDrop.cartZoneLabel2 = Drag store items to cart

# Panel Series Example
component.panelSeries.instructions = Series Panel component:
component.panelSeries.subInstructions = The product list and shopping list each define one element and iterate over a variable using the panelSeries component.
component.panelSeries.shoppingListTitle = Shopping List:
component.panelSeries.subtotalLabel = Subtotal:
component.panelSeries.totalLabel = Total:
component.panelSeries.productLabel.name = Name:
component.panelSeries.productLabel.serialNo = Serial #:
component.panelSeries.productLabel.category = Category:
component.panelSeries.productLabel.unitPrice = Price:
component.panelSeries.productSelection.discountLabel = Discount (%):
component.panelSeries.productSelection.quantityLabel = Quantity:

# Effects Example
effects.instructions = Effect:
effects.results = Results:
effects.attributes = Attributes:
effects.labels.duration = Duration (seconds):
effects.move.title = Move
effects.move.labels.mode = Mode:
effects.move.labels.x = X:
effects.move.labels.y = Y:
effects.appearFade.title = Appear & Fade
effects.appearFade.labels.from = Appear opacity:
effects.appearFade.labels.to = Fade opacity:
effects.highlight.title = Highlight
effects.highlight.labels.colour = Highlight Colour:
effects.pulsate.title = Pulsate
effects.pulsate.labels.duration = Duration (seconds):

effects.scale.title=Scale
effects.puff.title=Puff
effects.blindup.title=Blind Up
effects.blinddown.title=Blind Down
effects.swtichoff.title=Switch Off
effects.dropout.title =Drop Out
effects.shake.title=Shake
effects.slideDown.title=Slide Down
effects.slideup.title=Slide Up
effects.squish.title=Squish
effects.grow.title=Grow
effects.shrink.title=Shrink
effects.fold.title=Fold


# Connection Status Example
component.connectionStatus.title = Connection Status
component.connectionStatus.explanation = The connection status component displays information \
  about the status of the network connection between the client browser and the server. Look to the top right of this \
  tabbed pane to see the connection status in action. The component \
  displays one of four possible states, which are as follows:
component.connectionStatus.labels.connectIdle = Idle
component.connectionStatus.labels.connectActive = Active
component.connectionStatus.labels.connectCaution = Caution
component.connectionStatus.labels.connectDisconnected = Disconnected

# Menu Bar Example
component.menuBar.instructions = Menu Bar
component.menuBar.orientationLabel = Orientation:
component.menuBar.subInstructions = Select a menu item and the backing been value will be reflected on this page.
component.menuBar.selection = Menu Selection:

# Popup Panel Example
component.popupPanel.title = Popup Panel:
component.popupPanel.instructions =Use the controls below to toggle the Draggable and Modal Popup components.
component.popupPanel.draggable.title = Draggable Popup Panel
component.popupPanel.draggable.content = This Popup is draggable. It has a header facet with an Icon, a Title and a Close button. This popup can be toggled on and off.
component.popupPanel.draggable.controlLabel = Display Draggable Popup:
component.popupPanel.modal.title = Modal Popup Panel
component.popupPanel.modal.content = This Modal Popup is not draggable. It can only be closed using its Close button.
component.popupPanel.modal.controlLabel = Display Modal Popup:

# Examples used to fill tabs and panel example
contentDemo.fruit.title = Favourite Fruit
contentDemo.fruit.type1 = Pomegranate
contentDemo.fruit.type2 = Avocado
contentDemo.fruit.type3 = Banana
contentDemo.fruit.type4 = Mango
contentDemo.fruit.type5 = Carambola

contentDemo.color.title = Favourite Color
contentDemo.color.type1 = Yellow
contentDemo.color.type2 = Plum
contentDemo.color.type3 = Violet
contentDemo.color.type4 = Magenta
contentDemo.color.type5 = Bisque

contentDemo.mineral.title = Favourite Mineral
contentDemo.mineral.type1 = Sodalite
contentDemo.mineral.type2 = Serpentine
contentDemo.mineral.type3 = Galena
contentDemo.mineral.type4 = Dolomite
contentDemo.mineral.type5 = Kyanite

# Table example
component.table.title = Show Table Columns:
component.table.scrollable.title = Scrollable Settings:
component.table.scrollable.height = Scroll Height
component.table.column1 = First Name
component.table.column2 = Last Name
component.table.column3 = Phone
component.table.column4 = Email
component.table.scrollable = Enable Scrolling

# Columns example
component.columns.title = Manipulating the second dimension of a DataTable:

# Chart example
component.chart.title = Chart Type:
component.chart.addChart.label = Add Chart Item
component.chart.addChartCommand.label = Add
component.chart.removeChartCommand.label = Remove
component.chart.removeChart.label = Remove Chart Item
component.combinedChart.title = Combine different chart types:
component.dynamicChart.title = Manipulate the underlying chart data:

# table paginator
component.dataPaginator.description = Use the controls below to browse the information:
component.dataPaginator.layout.description = Change the layout of the paginator:
component.dataPaginator.data.description = Add or remove entries from the list:
component.dataPaginator.firstpage = first page
component.dataPaginator.lastpage = last page
component.dataPaginator.previouspage = previous page
component.dataPaginator.nextpage = next page
component.dataPaginator.fastforward =  fast forward
component.dataPaginator.fastbackward = fast backward


# row selection example
component.table.row.selection.instructions = Table rows can be selected and unselected with a mouse click.
component.table.row.selection.results= Selected Rows
component.table.row.selection.multiple = Enable multiple row selection
component.table.row.selection.clear = Clear Selection

# Positioned Panel Component
component.table.row.panelPositioned.instruction = Using the mouse move people in the Edit Rank column to change the rank.
component.table.row.panelPositioned.positionable.column.label = Edit Rank
component.table.row.panelPositioned.fixed.column.label = Current Rank
component.table.row.panelPositioned.changed.column.label = Rank Changed.

# Collapsible Panel Example
component.collapsiblePanel.title = Collapsible Panel:
component.collapsiblePanel.instructions = Click on the headers to expand/contract the accordion panel.
component.collapsiblePanel.links.header = Links
component.collapsiblePanel.form.header = Form
component.collapsiblePanel.form.firstName = First Name:
component.collapsiblePanel.form.lastName = Last Name:
component.collapsiblePanel.form.phone = Phone:
component.collapsiblePanel.form.email = Email:
component.collapsiblePanel.text.header = Text
component.collapsiblePanel.text.description = The industry's first standards-compliant AJAX based solution for rapidly creating \
  all Java rich web applications that are easily maintained, extended, and scaled, at very low cost.
component.collapsiblePanel.image.header = Image