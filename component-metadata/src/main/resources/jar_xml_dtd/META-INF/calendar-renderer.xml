<?xml version="1.0" encoding="UTF-8"?>
<renderer>
  <description><![CDATA[

<p>Use the <code>ui:calendar</code> when the user needs to select a
    date. The calendar component displays a text field that expects a
    date as input, together with an icon that when clicked displays a
    small calendar. The user can either type directly into the
    textfield or select a date from the calendar display. 
</p>

<h3>HTML Elements and Layout</h3>
<p>
The component renders several elements: an optional
<code>&lt;label&gt;</code>, an <code>&lt;input type="text"&gt;</code>
and an <code>&lt;img&gt;</code> element for the icon. They are laid
out inside a HTML <code>&lt;table&gt;</code>. </p> <p> The pop-up
calendar is a complex component also laid out using a HTML
<code>&lt;table&gt;</code>. It has child components corresponding to
<code>&lt;ui:dropDown&gt;</code> and
<code>&lt;ui:iconHyperlink&gt;</code> (please see these for details)
and anchors <code>&lt;a&gt;</code> to represent the dates and the
"close" button. </p>

<h3>Configuring the <code>ui:calendar</code> tag </h3>

<p>Use the <code>selectedDate</code> attribute to associate the
component with a model object that represents the current value, by
setting the attribute's value to an EL expression that corresponds to
a property of a backing bean.</p>

<p>By default, the component accepts dates between the current date
    and four years out. The years shown in the popup calendar reflect
    this range. If a date outside of the range is entered into the
    textfield, the component indicates a validation error. To specify
    a different range of date, use the <code>minDate</code> and
    <code>maxDate</code> attributes. 

<p>To optionally specify a label for the component, use the
<code>label</code> attribute, or specify a label facet. </p>

    <h3>Facets</h3>

    <ul>
    <li><code>label</code>: use this facet to specify a custom 
    component for the label.</li>
    <li><code>readOnly</code>: use this facet to specify a custom 
    component for displaying the value of this component when it is
    marked as readonly. The default is a <code>ui:staticText</code>. </li>
    </ul>


    <h3>Client-side JavaScript functions</h3>

    <p>In all the functions below, <code>&lt;id&gt;</code> should be
    the generated id of the TextField component. </p>

    <table cellpadding="2" cellspacing="2" border="1" 
           style="text-align: left; width: 100%;">
    <tbody>
    <tr>
    <td style="vertical-align">
    <code>[JSOBJECT_NAME]_setDisabled(&lt;id&gt;, &lt;disabled&gt;)</code>
    </td>
    <td style="vertical-align: top">
    Enable/disable the field. Set <code>&lt;disabled&gt;</code>
    to true to disable the component, or false to enable it.
    </td>
    </tr>
    <tr>
      <td style="vertical-align: top">
    <code>component_setVisible(&lt;id&gt;)</code>
  </td>
      <td style="vertical-align: top">Hide or show this component.
      </td>
    </tr>
  </tbody>
</table>

<h3>Examples</h3>

<h4>Example 1: Basic Popup Calendar</h4>

<p>The component gets the options from a managed bean called
<code>CalendarBean</code>. The value of the component
    <code>selectedDate</code> is bound to a property of the managed
    bean. A label for the component as a whole (<code>label</code>) is
    shown next to the component.  
</p>


<p>
This example shows how to create a simple calendar.
</p>  
<p>
 <pre>&lt;ui:calendar id="startDate" 
              selectedDate="#{CalendarBean.startDate}"
              label="Start Date: " /&gt;</pre>
</p>                      

<p>Code for the managed bean:<p>

<h4>CalendarBean.java</h4>

<code>import java.io.Serializable;<br>
import java.util.Date;<br>
import java.util.Calendar;<br>
import javax.faces.event.ValueChangeEvent;<br>
<br>
<br>
public class CalendarBean {<br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; public CalendarBean() {<br>
&nbsp;&nbsp;&nbsp; } <br>
&nbsp;&nbsp;&nbsp; <br>
&nbsp;&nbsp;&nbsp; private Date startDate = null;<br>
<br>
&nbsp;&nbsp;&nbsp; public Date getStartDate() {<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
return this.startDate;<br>
&nbsp;&nbsp;&nbsp; }<br>
<br>
<br>
&nbsp;&nbsp;&nbsp; public void setStartDate(Date startDate)
{<br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
this.startDate = startDate;<br>
&nbsp;&nbsp;&nbsp; }<br>
}</code><br>


 The <code>selectAll</code> attribute indicates that the
<code>Add All</code> and <code>Remove All</code> buttons should be
shown. A label for the component as a whole (<code>label</code>) is shown
next to the component (<code>labelOnTop</code> is false). Labels have
been specified for the list of available items and for the list of
selected items. The <code>sorted</code> attribute indicates that the options on
the list will be shown in alphabetical order.</p>

<h4>Example 2: DateFormat Pattern and Range of Dates configured</h4>

<p>The component gets the options from a managed bean called
<code>TravelBean</code>. The value of the component
    <code>selectedDate</code> is bound to a property
    <code>travelDate</code>of the managed
    bean. A label for the component as a whole (<code>label</code>) is
    shown next to the component; the label is retrieved from a message
    bundle. 
</p>

<p>The component has been configured to use a pattern for date
    representation consisting of four digits for the year, two for the
    month, and two for the day, separated by dashes. This pattern, set
    using the <code>dateFormatPattern</code> attribute will be used
    regardless of locale. With this date format pattern, the default
    help string will be "YYYY-MM-DD", which is suitable for English,
    but not for other locales where other words are used, so a
    different message is retrieved for each locale
    (<code>dateFormatPattern</code>). </p> 

<p>
The component is also configured to restrict the range of dates that
    are valid, so that the first valid date is the day after the day
    the component is viewed, and the last valid date is six months
    from that date.
<p>

<pre>
    &lt;ui:calendar id="travelDate" 
        selectedDate="#{TravelBean.travelDate}"
        label="#{msgs.travelDate}"
        dateFormatPattern="yyyy-MM-dd"
        dateFormatPatternHelp="#{msgs.dateFormatPattern}"
        minDate="#{TravelBean.tomorrowsDate}"
        maxDate="#{TravelBean.sixMonthsFromNow}" /&gt;
</pre> 
]]>
 </description>

  <component-family>com.sun.rave.web.ui.Calendar</component-family>

  <renderer-type>com.sun.rave.web.ui.Calendar</renderer-type>

      <attribute>
    <description><![CDATA[
	     <p>
             The binding attribute is used to configure the component through 
             Java code. This approach is intended for advanced uses, when the 
             tag attributes cannot provide the desired output. The value of the 
             binding attribute must be a JavaServer Faces EL expression that 
             resolves to a backing bean, or to a backing bean property of type 
             <code>com.sun.web.ui.component.Calendar</code>. </p>
             <p>You must assign a component id to the component instance.
	    </p>]]>
	</description>
    <attribute-name>binding</attribute-name>
  </attribute>
  
      <attribute>
        <attribute-name>value</attribute-name>
        <attribute-extension>
          <is-hidden>true</is-hidden>
          <tag-attribute>false</tag-attribute>
        </attribute-extension>
      </attribute>

      <attribute>
        <attribute-name>trim</attribute-name>
        <attribute-extension>
          <is-hidden>true</is-hidden>
          <tag-attribute>false</tag-attribute>
        </attribute-extension>
      </attribute>

      <attribute>
        <attribute-name>maxLength</attribute-name>
        <attribute-extension>
          <is-hidden>true</is-hidden>
          <tag-attribute>false</tag-attribute>
        </attribute-extension>
      </attribute>

      <attribute>
        <attribute-name>text</attribute-name>
        <attribute-extension>
          <is-hidden>true</is-hidden>
          <tag-attribute>false</tag-attribute>
        </attribute-extension>
      </attribute>

      &visible-attrs;
      &converter-props;
      &validator-props;

  <renderer-extension>
    <tag-name>calendar</tag-name>
    <taglib-prefix>ui</taglib-prefix>
    <taglib-uri>http://www.sun.com/web/ui</taglib-uri>
  </renderer-extension>

</renderer>
